// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'pages/question_two/chat/objectbox/chat_history_box.dart';
import 'pages/question_two/chat/objectbox/message_box.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 3716518117399807000),
      name: 'ChatHistoryBox',
      lastPropertyId: const obx_int.IdUid(6, 6268037442192094151),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5204963987728180623),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8261038726490731302),
            name: 'chatId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 9207594178493273297),
            name: 'prompt',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 2053325025073889902),
            name: 'response',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 97387615687106648),
            name: 'imagesUrls',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 6268037442192094151),
            name: 'timestamp',
            type: 10,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 637863927742306669),
      name: 'MessageBox',
      lastPropertyId: const obx_int.IdUid(7, 950910419302602373),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2072698800296911677),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1170964302405123523),
            name: 'messageId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 9092646065672154209),
            name: 'chatId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 2209939462023938216),
            name: 'isUser',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 611303826365858446),
            name: 'message',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 6619898844230451246),
            name: 'imagesUrls',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 950910419302602373),
            name: 'timeSent',
            type: 10,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(2, 637863927742306669),
      lastIndexId: const obx_int.IdUid(0, 0),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    ChatHistoryBox: obx_int.EntityDefinition<ChatHistoryBox>(
        model: _entities[0],
        toOneRelations: (ChatHistoryBox object) => [],
        toManyRelations: (ChatHistoryBox object) => {},
        getId: (ChatHistoryBox object) => object.id,
        setId: (ChatHistoryBox object, int id) {
          object.id = id;
        },
        objectToFB: (ChatHistoryBox object, fb.Builder fbb) {
          final chatIdOffset = fbb.writeString(object.chatId);
          final promptOffset = fbb.writeString(object.prompt);
          final responseOffset = fbb.writeString(object.response);
          final imagesUrlsOffset = fbb.writeList(
              object.imagesUrls.map(fbb.writeString).toList(growable: false));
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, chatIdOffset);
          fbb.addOffset(2, promptOffset);
          fbb.addOffset(3, responseOffset);
          fbb.addOffset(4, imagesUrlsOffset);
          fbb.addInt64(5, object.timestamp.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final chatIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final promptParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final responseParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final imagesUrlsParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 12, []);
          final timestampParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0));
          final object = ChatHistoryBox(
              id: idParam,
              chatId: chatIdParam,
              prompt: promptParam,
              response: responseParam,
              imagesUrls: imagesUrlsParam,
              timestamp: timestampParam);

          return object;
        }),
    MessageBox: obx_int.EntityDefinition<MessageBox>(
        model: _entities[1],
        toOneRelations: (MessageBox object) => [],
        toManyRelations: (MessageBox object) => {},
        getId: (MessageBox object) => object.id,
        setId: (MessageBox object, int id) {
          object.id = id;
        },
        objectToFB: (MessageBox object, fb.Builder fbb) {
          final messageIdOffset = fbb.writeString(object.messageId);
          final chatIdOffset = fbb.writeString(object.chatId);
          final messageOffset = fbb.writeString(object.message);
          final imagesUrlsOffset = fbb.writeList(
              object.imagesUrls.map(fbb.writeString).toList(growable: false));
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, messageIdOffset);
          fbb.addOffset(2, chatIdOffset);
          fbb.addBool(3, object.isUser);
          fbb.addOffset(4, messageOffset);
          fbb.addOffset(5, imagesUrlsOffset);
          fbb.addInt64(6, object.timeSent.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final messageIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final chatIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final isUserParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 10, false);
          final messageParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final imagesUrlsParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 14, []);
          final timeSentParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0));
          final object = MessageBox(
              messageId: messageIdParam,
              chatId: chatIdParam,
              isUser: isUserParam,
              message: messageParam,
              imagesUrls: imagesUrlsParam,
              timeSent: timeSentParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [ChatHistoryBox] entity fields to define ObjectBox queries.
class ChatHistoryBox_ {
  /// see [ChatHistoryBox.id]
  static final id =
      obx.QueryIntegerProperty<ChatHistoryBox>(_entities[0].properties[0]);

  /// see [ChatHistoryBox.chatId]
  static final chatId =
      obx.QueryStringProperty<ChatHistoryBox>(_entities[0].properties[1]);

  /// see [ChatHistoryBox.prompt]
  static final prompt =
      obx.QueryStringProperty<ChatHistoryBox>(_entities[0].properties[2]);

  /// see [ChatHistoryBox.response]
  static final response =
      obx.QueryStringProperty<ChatHistoryBox>(_entities[0].properties[3]);

  /// see [ChatHistoryBox.imagesUrls]
  static final imagesUrls =
      obx.QueryStringVectorProperty<ChatHistoryBox>(_entities[0].properties[4]);

  /// see [ChatHistoryBox.timestamp]
  static final timestamp =
      obx.QueryDateProperty<ChatHistoryBox>(_entities[0].properties[5]);
}

/// [MessageBox] entity fields to define ObjectBox queries.
class MessageBox_ {
  /// see [MessageBox.id]
  static final id =
      obx.QueryIntegerProperty<MessageBox>(_entities[1].properties[0]);

  /// see [MessageBox.messageId]
  static final messageId =
      obx.QueryStringProperty<MessageBox>(_entities[1].properties[1]);

  /// see [MessageBox.chatId]
  static final chatId =
      obx.QueryStringProperty<MessageBox>(_entities[1].properties[2]);

  /// see [MessageBox.isUser]
  static final isUser =
      obx.QueryBooleanProperty<MessageBox>(_entities[1].properties[3]);

  /// see [MessageBox.message]
  static final message =
      obx.QueryStringProperty<MessageBox>(_entities[1].properties[4]);

  /// see [MessageBox.imagesUrls]
  static final imagesUrls =
      obx.QueryStringVectorProperty<MessageBox>(_entities[1].properties[5]);

  /// see [MessageBox.timeSent]
  static final timeSent =
      obx.QueryDateProperty<MessageBox>(_entities[1].properties[6]);
}
